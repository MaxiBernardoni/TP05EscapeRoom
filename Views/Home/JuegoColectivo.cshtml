@model TuProyecto.Models.JuegoColectivoModel
@{
    ViewData["Title"] = "Piedra, Papel o Tijera con el Conductor";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int totalSeconds = ViewBag.GameSeconds ?? 0;
}

<style>
    .juego-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        text-align: center;
        background: rgba(0, 0, 0, 0.8);
        border-radius: 15px;
        box-shadow: 0 0 20px rgba(0, 255, 255, 0.2);
        color: #fff;
    }

    .marcador {
        display: flex;
        justify-content: space-around;
        align-items: center;
        margin: 20px 0;
        font-size: 1.5em;
    }

    .jugador-score, .conductor-score {
        padding: 10px 20px;
        border-radius: 10px;
        background: rgba(255, 255, 255, 0.1);
        min-width: 100px;
    }

    .ronda-actual {
        font-size: 1.2em;
        margin: 20px 0;
        color: #2196F3;
    }

    .conductor-container {
        margin: 20px 0;
        position: relative;
        min-height: 200px;
    }

    .conductor {
        width: 150px;
        height: 150px;
        margin: 0 auto;
        background: url('/images/conductor-normal.png') center/contain no-repeat;
        transition: transform 0.3s ease;
    }

    .conductor:hover {
        transform: scale(1.1);
    }

    .dialogo-conductor {
        background: #fff;
        color: #000;
        padding: 15px;
        border-radius: 10px;
        position: relative;
        margin: 20px auto;
        max-width: 80%;
        opacity: 0.9;
    }

    .dialogo-conductor:after {
        content: '';
        position: absolute;
        top: 100%;
        left: 50%;
        margin-left: -10px;
        border-width: 10px;
        border-style: solid;
        border-color: #fff transparent transparent transparent;
    }

    .opciones-container {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin: 30px 0;
    }

    .opcion-btn {
        font-size: 2em;
        padding: 20px 30px;
        border: none;
        border-radius: 10px;
        background: linear-gradient(145deg, #1a1a1a, #333);
        color: #fff;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .opcion-btn:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0, 255, 255, 0.3);
    }

    .opcion-btn:before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            120deg,
            transparent,
            rgba(0, 255, 255, 0.2),
            transparent
        );
        transition: 0.5s;
    }

    .opcion-btn:hover:before {
        left: 100%;
    }

    .opcion-emoji {
        font-size: 1.5em;
        margin-right: 10px;
    }

    #global-timer {
        position: fixed;
        top: 20px;
        right: 20px;
        font-size: 2em;
        font-family: 'Digital-7', monospace;
        color: #ff0000;
        text-shadow: 0 0 10px rgba(255, 0, 0, 0.5);
        background: rgba(0, 0, 0, 0.8);
        padding: 10px 20px;
        border-radius: 10px;
        z-index: 1000;
    }

    .instrucciones {
        background: rgba(0, 255, 255, 0.1);
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    @@keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
    }

    .shake {
        animation: shake 0.5s ease-in-out infinite;
    }
</style>

<div id="global-timer"></div>

<div class="juego-container">
    <h2 class="mb-4">¬°Desaf√≠o del Conductor!</h2>
    
    <div class="marcador">
        <div class="jugador-score">
            T√∫: @Model.VictoriasJugador
        </div>
        <div class="ronda-actual">
            Ronda @Model.RondaActual
        </div>
        <div class="conductor-score">
            Conductor: @Model.VictoriasConductor
        </div>
    </div>

    <div class="instrucciones">
        <p>El conductor te desaf√≠a a un juego de Piedra, Papel o Tijera al mejor de 3.</p>
        <p>Si ganas el desaf√≠o: ¬°tomar√° todos los atajos! (-30 segundos)</p>
        <p>Si pierdes: ¬°ruta m√°s larga! (+60 segundos)</p>
    </div>

    <div class="conductor-container">
        <div class="dialogo-conductor">
            "¬°Veamos qu√© tan bueno eres! Elige tu movimiento..."
        </div>
        <div class="conductor"></div>
    </div>

    <form asp-action="ResultadoColectivo" method="post" id="gameForm">
        <div class="opciones-container">
            <button type="submit" name="eleccion" value="piedra" class="opcion-btn">
                <span class="opcion-emoji">ü™®</span> Piedra
            </button>
            <button type="submit" name="eleccion" value="papel" class="opcion-btn">
                <span class="opcion-emoji">üìÑ</span> Papel
            </button>
            <button type="submit" name="eleccion" value="tijera" class="opcion-btn">
                <span class="opcion-emoji">‚úÇÔ∏è</span> Tijera
            </button>
        </div>
    </form>
</div>

<script>
    let totalSeconds = @totalSeconds;

    function iniciarReloj() {
        const global = document.getElementById("global-timer");

        function actualizar() {
            totalSeconds++;
            const totalMin = 60 * 8 + Math.floor(totalSeconds / 60);
            const horas = Math.floor(totalMin / 60).toString().padStart(2, '0');
            const mins = (totalMin % 60).toString().padStart(2, '0');
            const segs = (totalSeconds % 60).toString().padStart(2, '0');

            global.innerText = `${horas}:${mins}:${segs}`;

            fetch(`/home/updateclock?seconds=${totalSeconds}`);
        }

        actualizar();
        setInterval(actualizar, 1000);
    }

    document.addEventListener('DOMContentLoaded', function() {
        iniciarReloj();

        const buttons = document.querySelectorAll('.opcion-btn');
        buttons.forEach(button => {
            button.addEventListener('click', function() {
                buttons.forEach(b => b.style.transform = 'scale(0.95)');
                this.style.transform = 'scale(1.1)';
            });
        });

        const conductor = document.querySelector('.conductor');
        setInterval(() => {
            conductor.classList.add('shake');
            setTimeout(() => conductor.classList.remove('shake'), 500);
        }, 3000);
    });
</script>
